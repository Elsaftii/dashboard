// "use client"
// import type { Metadata } from "next";
// import { Inter } from "next/font/google";
// import "./globals.css";
// import NextAuthProvider from "./providers/NextAuthProvider";
// import {Container, CssBaseline,ThemeProvider, createTheme} from "@mui/material";
// import React from "react";
// import Header from "./header/page";
// import darkTheme from "@/theme/darkTheme";
// import lightTheme from "@/theme/lightTheme";
// import { getServerSession } from "next-auth";
// import Footer from "./footer/page";
// import Sidemenu from "./sidemenu/page";
// import style from './page.module.css'
// import { useSession } from "next-auth/react";
// import router from "next/router";


// const inter = Inter({ subsets: ["latin"] });
// const ColorModeContext = React.createContext({ toggleColorMode: () => { } });




// const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

// getServerSession

// export default function RootLayout({
//   children,
// }: Readonly<{
//   children: React.ReactNode;
// }>) {
//   const { data: session } = useSession();


//   const [mode, setMode] = React.useState<'light' | 'dark'>('dark');
//   const colorMode = React.useMemo(
//     () => ({
//       toggleColorMode: () => {
//         setMode((prevMode) => (prevMode === 'light' ? 'dark' : 'light'));
//       },
//     }),
//     [],
//   );
//   const darkThemeChosen = React.useMemo(
//     () =>
//       createTheme({
//         ...darkTheme
//       }),
//     [],
//   );
//   const lightThemeChosen = React.useMemo(
//     () =>
//       createTheme({
//         ...lightTheme
//       }),
//     [],
//   );

//   if(!session){
//     return router.push('/login');
//   }

//   return (
//     <html lang="en">
//       <body className={inter.className}>
//         <ColorModeContext.Provider value={colorMode}>
//           <ThemeProvider theme={mode === 'dark' ? darkThemeChosen : lightThemeChosen}>
//             <NextAuthProvider>
//               <CssBaseline />

//               <Header colorModeContext={ColorModeContext} />

//               <Container  className={style.space} maxWidth="lg">
//                 <Sidemenu/>
//                 {children}
//               </Container>
//               <Footer />
//             </NextAuthProvider>
//           </ThemeProvider>
//         </ColorModeContext.Provider>


//       </body>
//     </html>
//   );
// }
"use client"
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import NextAuthProvider from "./providers/NextAuthProvider";
import { Container, CssBaseline, ThemeProvider, createTheme } from "@mui/material";
import React, { useEffect } from "react";
import Header from "../common/header/header";
import darkTheme from "@/theme/darkTheme";
import lightTheme from "@/theme/lightTheme";
import Footer from "../common/footer/footer";
import Sidemenu from "../common/sidemenu/sidemenu";
import style from './page.module.css';
import { useRouter } from "next/router";
import { SessionProvider, useSession } from "next-auth/react";


const inter = Inter({ subsets: ["latin"] });
const ColorModeContext = React.createContext({ toggleColorMode: () => { } });

const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  // const { data: session } = useSession();

  // const { data: session } = useSession();
  // const router = useRouter();

  const [mode, setMode] = React.useState<'light' | 'dark'>('dark');
  const colorMode = React.useMemo(
    () => ({
      toggleColorMode: () => {
        setMode((prevMode) => (prevMode === 'light' ? 'dark' : 'light'));
      },
    }),
    [],
  );
  const darkThemeChosen = React.useMemo(
    () =>
      createTheme({
        ...darkTheme
      }),
    [],
  );
  const lightThemeChosen = React.useMemo(
    () =>
      createTheme({
        ...lightTheme
      }),
    [],
  );

  // useEffect(() => {
  //   if (!session) {
  //     router.push("/login");
  //   }
  // }, [session, router]);

  return (
    <html lang="en">
      <body className={inter.className}>
        <ColorModeContext.Provider value={colorMode}>
          <ThemeProvider theme={mode === 'dark' ? darkThemeChosen : lightThemeChosen}>
            <NextAuthProvider>
              <CssBaseline />

              <Header colorModeContext={ColorModeContext} />

              <Container className={style.space} maxWidth="lg">
                <Sidemenu />
                <SessionProvider>

                  {children}
                </SessionProvider>

              </Container>
              <Footer />
            </NextAuthProvider>
          </ThemeProvider>
        </ColorModeContext.Provider>

      </body>
    </html>
  );
}

